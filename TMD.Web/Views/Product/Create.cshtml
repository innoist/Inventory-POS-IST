@model TMD.Web.ViewModels.ProductViewModel
@{
    ViewBag.Title = "Create/Update Product";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var isEdit = (Model.ProductModel != null && Model.ProductModel.ProductId > 0);
    Session["MenuKey"] = 11;
}


@using (Html.BeginForm("Create", "Product", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <div class="portlet box blue-hoki">
        <div class="portlet-title">

            <div class="tools">
                @*<a href="javascript:;" class="collapse">
                    </a>*@

                <button type="submit" class="btn btn-circle blue" name="save" onclick="return(ValidateFields(event) && ValidateSalePrice()) ;">Save</button>
                <button type="submit" class="btn btn-circle blue" name="saveCreate" onclick="return (ValidateFields(event) && ValidateSalePrice());">Save & Add New</button>
                <a href="~/Product/Index">
                    <button type="button" class="btn btn-circle default">Cancel</button>
                </a>
            </div>
            <div class="caption">
                <i class="fa fa-male"></i>Create/Update Product
            </div>
        </div>

        <div class="portlet-body form">
            <div class="container-fluid">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.ProductModel.ProductId)
                @Html.HiddenFor(m => m.ProductModel.RecCreatedBy)
                @Html.HiddenFor(m => m.ProductModel.RecCreatedDate)
                
                <div class="form-group margin-top-20">
                    @Html.LabelFor(m => m.ProductModel.ProductBarCode, new { @class = "col-md-3 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.ProductModel.ProductBarCode, new { @class = "form-control input-circle searchBarcode", @autofocus = "autofocus", @id = "Barcode" })
                    </div>
                </div>

                <div class="form-group margin-top-20">
                    @Html.LabelFor(m => m.ProductModel.Name, new { @class = "col-md-3 control-label requiredLabel" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.ProductModel.Name, new { @class = "form-control input-circle mandatory", @id = "ProductName" })
                        @Html.ValidationMessageFor(model => model.ProductModel.Name)
                    </div>
                    @if (ViewBag.LastSavedId != null)
                    {
                        @Html.Label("Last Saved Product Id", new { @class = "col-md-1 control-label" })
                        <div class="col-md-2">
                            @Html.TextBox("LastSavedProductId", (long)ViewBag.LastSavedId, new { @class = "form-control input-circle", @readonly = true, @tabindex = 100 })
                        </div>
                    }
                </div>
                
                <div class="form-group margin-top-20">
                    @Html.LabelFor(m => m.ProductModel.PurchasePrice, new { @class = "col-md-3 control-label requiredLabel" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.ProductModel.PurchasePrice, new { @class = "form-control input-circle mandatory", @id = "PurchasePrice", @onchange = "ShowProfit();" })
                        @Html.ValidationMessageFor(model => model.ProductModel.PurchasePrice)
                    </div>
                </div>

                <div class="form-group margin-top-20">
                    @Html.LabelFor(m => m.ProductModel.SalePrice, new { @class = "col-md-3 control-label requiredLabel" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.ProductModel.SalePrice, new { @class = "form-control input-circle mandatory", @id = "SalePrice", @onchange = "SetMinSalePrice();ShowProfit();" })
                        @Html.ValidationMessageFor(model => model.ProductModel.SalePrice)
                    </div>

                    @Html.Label("% Profit", new { @class = "col-md-1 control-label" })
                    <div class="col-md-2">
                        @Html.TextBox("Profit", null, new { @class = "form-control input-circle", @readonly = true, @tabindex = 100 })
                    </div>
                </div>

                <div class="form-group margin-top-20">
                    @Html.LabelFor(m => m.ProductModel.MinSalePriceAllowed, new { @class = "col-md-3 control-label requiredLabel" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.ProductModel.MinSalePriceAllowed, new { @class = "form-control input-circle", @id = "MinSalePriceAllowed" })
                        @Html.ValidationMessageFor(model => model.ProductModel.MinSalePriceAllowed)
                    </div>
                </div>
                
                <div class="form-group margin-top-20">
                    @Html.LabelFor(m => m.ProductModel.CategoryId, new { @class = "col-md-3 control-label requiredLabel" })
                    <div class="col-md-4">
                        @Html.DropDownListFor(model => model.ProductModel.CategoryId, new SelectList(Model.ProductCategories.OrderBy(x=>x.NameWithMainCategory), "CategoryId", "NameWithMainCategory"), "Select Category", new { @class = "form-control input-circle mandatory", @id = "Category" })
                        @Html.ValidationMessageFor(model => model.ProductModel.CategoryId)
                    </div>
                    
                </div>

                <div class="form-group margin-top-20">
                    @Html.LabelFor(m => m.ProductModel.Comments, new { @class = "col-md-3 control-label" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.ProductModel.Comments, new { @class = "form-control input-circle" })
                    </div>
                </div>
            </div>

        </div>
    </div>
}

<script src="~/Scripts/InventoryScripts.js"></script>
<script>
    jQuery(document).on('keydown', '.searchBarcode', function (ev) {
        if (ev.which === 13 || ev.which==9) {
            LoadProductByCode(this);
            // Avoid form submit
            return false;
        }
    });
    $(document).ready(function () {
        if ('@isEdit') {
            ShowProfit();
        }
    });
    function SetMinSalePrice() {
        $("#MinSalePriceAllowed").val($("#SalePrice").val());
    }
    function ValidateSalePrice() {
        var Cost = parseInt($('#PurchasePrice').val());
        var Sale = parseInt($('#SalePrice').val());

        if (Cost < Sale)
            return true;
        toastr.error("Sale Price should be greater than Purchase Price");
        return false;


    }
</script>